import { P as PutCommandOptions, a as PutBlobResult, B as BlobCommandOptions } from './put-fca5396f.js';
export { b as BlobAccessError, c as BlobError, g as BlobNotFoundError, e as BlobStoreNotFoundError, f as BlobStoreSuspendedError, d as BlobUnknownError } from './put-fca5396f.js';
import * as stream from 'stream';

declare const put: (pathname: string, body: string | stream.Readable | Blob | ArrayBuffer | FormData | ReadableStream<any> | File, options?: PutCommandOptions | undefined) => Promise<PutBlobResult>;
declare function del(url: string[] | string, options?: BlobCommandOptions): Promise<void>;
interface HeadBlobResult {
    url: string;
    size: number;
    uploadedAt: Date;
    pathname: string;
    contentType: string;
    contentDisposition: string;
    cacheControl: string;
}
declare function head(url: string, options?: BlobCommandOptions): Promise<HeadBlobResult>;
interface ListBlobResultBlob {
    url: string;
    pathname: string;
    size: number;
    uploadedAt: Date;
}
interface ListBlobResult {
    blobs: ListBlobResultBlob[];
    cursor?: string;
    hasMore: boolean;
}
interface ListCommandOptions extends BlobCommandOptions {
    limit?: number;
    prefix?: string;
    cursor?: string;
}
declare function list(options?: ListCommandOptions): Promise<ListBlobResult>;

export { HeadBlobResult, ListBlobResult, ListCommandOptions, PutBlobResult, del, head, list, put };
