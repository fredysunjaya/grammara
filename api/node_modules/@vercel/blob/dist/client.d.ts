import * as stream from 'stream';
import { IncomingMessage } from 'node:http';
import { a as PutBlobResult, B as BlobCommandOptions } from './put-fca5396f.js';

interface ClientPutCommandOptions {
    access: 'public';
    token: string;
    contentType?: string;
}
declare const put: (pathname: string, body: string | stream.Readable | Blob | ArrayBuffer | FormData | ReadableStream<any> | File, options?: ClientPutCommandOptions | undefined) => Promise<PutBlobResult>;
interface UploadOptions {
    access: 'public';
    contentType?: string;
    handleUploadUrl: string;
    clientPayload?: string;
}
declare const upload: (pathname: string, body: string | stream.Readable | Blob | ArrayBuffer | FormData | ReadableStream<any> | File, options?: UploadOptions | undefined) => Promise<PutBlobResult>;
type DecodedClientTokenPayload = Omit<GenerateClientTokenOptions, 'token'> & {
    validUntil: number;
};
declare function getPayloadFromClientToken(clientToken: string): DecodedClientTokenPayload;
declare const EventTypes: {
    readonly generateClientToken: "blob.generate-client-token";
    readonly uploadCompleted: "blob.upload-completed";
};
interface GenerateClientTokenEvent {
    type: (typeof EventTypes)['generateClientToken'];
    payload: {
        pathname: string;
        callbackUrl: string;
        clientPayload?: string;
    };
}
interface UploadCompletedEvent {
    type: (typeof EventTypes)['uploadCompleted'];
    payload: {
        blob: PutBlobResult;
        tokenPayload?: string;
    };
}
type HandleUploadBody = GenerateClientTokenEvent | UploadCompletedEvent;
type RequestType = IncomingMessage | Request;
interface HandleUploadOptions {
    body: HandleUploadBody;
    onBeforeGenerateToken: (pathname: string, clientPayload?: string) => Promise<Pick<GenerateClientTokenOptions, 'allowedContentTypes' | 'maximumSizeInBytes' | 'validUntil' | 'addRandomSuffix' | 'cacheControlMaxAge'> & {
        tokenPayload?: string;
    }>;
    onUploadCompleted: (body: UploadCompletedEvent['payload']) => Promise<void>;
    token?: string;
    request: RequestType;
}
declare function handleUpload({ token, request, body, onBeforeGenerateToken, onUploadCompleted, }: HandleUploadOptions): Promise<{
    type: GenerateClientTokenEvent['type'];
    clientToken: string;
} | {
    type: UploadCompletedEvent['type'];
    response: 'ok';
}>;
declare function generateClientTokenFromReadWriteToken({ token, ...argsWithoutToken }: GenerateClientTokenOptions): Promise<string>;
interface GenerateClientTokenOptions extends BlobCommandOptions {
    pathname: string;
    onUploadCompleted?: {
        callbackUrl: string;
        tokenPayload?: string;
    };
    maximumSizeInBytes?: number;
    allowedContentTypes?: string[];
    validUntil?: number;
    addRandomSuffix?: boolean;
    cacheControlMaxAge?: number;
}

export { ClientPutCommandOptions, DecodedClientTokenPayload, GenerateClientTokenOptions, HandleUploadBody, HandleUploadOptions, UploadOptions, generateClientTokenFromReadWriteToken, getPayloadFromClientToken, handleUpload, put, upload };
