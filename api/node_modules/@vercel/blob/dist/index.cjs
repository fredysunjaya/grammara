"use strict";Object.defineProperty(exports, "__esModule", {value: true});











var _chunkL5YSJHMQcjs = require('./chunk-L5YSJHMQ.cjs');

// src/index.ts
var _undici = require('undici');
var put = _chunkL5YSJHMQcjs.createPutMethod.call(void 0, {
  allowedOptions: ["cacheControlMaxAge", "addRandomSuffix", "contentType"]
});
async function del(url, options) {
  const blobApiResponse = await _undici.fetch.call(void 0, _chunkL5YSJHMQcjs.getApiUrl.call(void 0, "/delete"), {
    method: "POST",
    headers: {
      ..._chunkL5YSJHMQcjs.getApiVersionHeader.call(void 0, ),
      authorization: `Bearer ${_chunkL5YSJHMQcjs.getTokenFromOptionsOrEnv.call(void 0, options)}`,
      "content-type": "application/json"
    },
    body: JSON.stringify({ urls: Array.isArray(url) ? url : [url] })
  });
  await _chunkL5YSJHMQcjs.validateBlobApiResponse.call(void 0, blobApiResponse);
  await blobApiResponse.json();
}
async function head(url, options) {
  const headApiUrl = new URL(_chunkL5YSJHMQcjs.getApiUrl.call(void 0, ));
  headApiUrl.searchParams.set("url", url);
  const blobApiResponse = await _undici.fetch.call(void 0, headApiUrl, {
    method: "GET",
    // HEAD can't have body as a response, so we use GET
    headers: {
      ..._chunkL5YSJHMQcjs.getApiVersionHeader.call(void 0, ),
      authorization: `Bearer ${_chunkL5YSJHMQcjs.getTokenFromOptionsOrEnv.call(void 0, options)}`
    }
  });
  await _chunkL5YSJHMQcjs.validateBlobApiResponse.call(void 0, blobApiResponse);
  const headResult = await blobApiResponse.json();
  return mapBlobResult(headResult);
}
async function list(options) {
  const listApiUrl = new URL(_chunkL5YSJHMQcjs.getApiUrl.call(void 0, ));
  if (options == null ? void 0 : options.limit) {
    listApiUrl.searchParams.set("limit", options.limit.toString());
  }
  if (options == null ? void 0 : options.prefix) {
    listApiUrl.searchParams.set("prefix", options.prefix);
  }
  if (options == null ? void 0 : options.cursor) {
    listApiUrl.searchParams.set("cursor", options.cursor);
  }
  const blobApiResponse = await _undici.fetch.call(void 0, listApiUrl, {
    method: "GET",
    headers: {
      ..._chunkL5YSJHMQcjs.getApiVersionHeader.call(void 0, ),
      authorization: `Bearer ${_chunkL5YSJHMQcjs.getTokenFromOptionsOrEnv.call(void 0, options)}`
    }
  });
  await _chunkL5YSJHMQcjs.validateBlobApiResponse.call(void 0, blobApiResponse);
  const results = await blobApiResponse.json();
  return {
    ...results,
    blobs: results.blobs.map(mapBlobResult)
  };
}
function mapBlobResult(blobResult) {
  return {
    ...blobResult,
    uploadedAt: new Date(blobResult.uploadedAt)
  };
}











exports.BlobAccessError = _chunkL5YSJHMQcjs.BlobAccessError; exports.BlobError = _chunkL5YSJHMQcjs.BlobError; exports.BlobNotFoundError = _chunkL5YSJHMQcjs.BlobNotFoundError; exports.BlobStoreNotFoundError = _chunkL5YSJHMQcjs.BlobStoreNotFoundError; exports.BlobStoreSuspendedError = _chunkL5YSJHMQcjs.BlobStoreSuspendedError; exports.BlobUnknownError = _chunkL5YSJHMQcjs.BlobUnknownError; exports.del = del; exports.head = head; exports.list = list; exports.put = put;
//# sourceMappingURL=index.cjs.map